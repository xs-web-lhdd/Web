<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=\, initial-scale=1.0">
    <title>Document</title>
    <style>
        div{
            position: absolute;
            left: 0;
            width: 100px;
            height: 100px;
            background-color: pink;
        }
        span{
            position: absolute;
            /* 必须加定位relative也可以 */
            left: 0;
            top: 200px;
            display: block;
            width: 150px;
            height: 150px;
            background-color: purple;
        }
    </style>
</head>
<body>
    <button class="btn500">点击夏雨荷才走到500</button>
    <button class="btn800">点击夏雨荷才走到800</button>
    <div></div>
    <span>夏雨荷</span>
    <script>
        // var obj={};
        // obj.name='andy'
        // 简单动画函数封装 obj目标对象 taregt目标位置
            // 给不同元素指定不同的定时器  好处：
            // 1、开辟一个obj空间 减少内存浪费
            // 2、容易看出是div的timer还是span的timer
        function animate(obj,target,callback){
            // console.log(callback);   callback = function(){} 调用的时候 callback()

            // 当我们不断的点击按钮，这个元素的速度会越来越快，因为开启了太多的定时器
            // 解决方案：让我们元素只有一个定时器执行
            clearInterval(obj.timer);
            // 先清除以前的定时器，只保留当前的一个定时器执行
            obj.timer=setInterval(function(){
                // 步长值写到定时器的里面
                // 把我们步长值改为整数 不要出现小数的问题  Math.ceil往上取整
                // var step = Math.ceil((target-obj.offsetLeft)/10);
                var step=(target-obj.offsetLeft)/10;
                // 如果step为正值就往大了取 为负值就往小了取
                if(step>=0){
                   step= Math.ceil(step);
                }
                else{
                   step= Math.floor(step);
                }
                // 停止的条件是让当前盒子位置等于目标位置就停止定时器故将>=改为==
            if(obj.offsetLeft == target){
                // 停止动画 本质是停止定时器
                clearInterval(obj.timer);
                // 回调函数写到定时器结束里面
                if(callback){
                    // 调用函数
                    callback();
                }
            }
            // 把每次加一这个步长值改为一个慢慢变小的值  步长公式
            obj.style.left=obj.offsetLeft+step+'px';
        },15);
        }
        var div=document.querySelector('div');
        var span=document.querySelector('span');
        var btn500=document.querySelector('.btn500');
        var btn800=document.querySelector('.btn800')
        // 调用函数
        animate(div,500);
        // animate(span,200);
        btn500.addEventListener('click',function(){
            animate(span,500);
        })
        btn800.addEventListener('click',function(){
            // 把函数作为另外一个参数传递给另外一个函数 当前面执行完了才执行 所以称为回调函数
            animate(span,800,function(){
                // alert('你好吗?');
                span.style.backgroundColor='red';
            });
        })
    </script>
</body>
</html>
